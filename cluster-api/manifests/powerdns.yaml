---
apiVersion: v1
kind: Secret
metadata:
  name: powerdns-secret
  namespace: pair-system
  labels:
    app.kubernetes.io/name: powerdns
    app.kubernetes.io/instance: powerdns
type: Opaque
stringData:
  PDNS_APIKEY: pairingissharing
  PDNSADMIN_SECRET: pairingissharing
  MYSQL_PASS: pairingissharing
  MYSQL_ROOTPASS: pairingissharing
---
apiVersion: v1
kind: Service
metadata:
  name: powerdns-service-db
  namespace: pair-system
  labels:
    app.kubernetes.io/name: powerdns
    app.kubernetes.io/instance: powerdns
spec:
  type: ClusterIP
  ports:
    - port: 3306
      name: db
      protocol: TCP
      targetPort: 3306
  selector:
    app.kubernetes.io/name: powerdns
    app.kubernetes.io/instance: powerdns
    powerdns.com/role: db
---
apiVersion: v1
kind: Service
metadata:
  name: powerdns-service-api
  namespace: pair-system
  labels:
    app.kubernetes.io/name: powerdns
    app.kubernetes.io/instance: powerdns
spec:
  type: ClusterIP
  ports:
    - port: 8081
      targetPort: api
      protocol: TCP
      name: api
  selector:
    app.kubernetes.io/name: powerdns
    app.kubernetes.io/instance: powerdns
    powerdns.com/role: api
---
apiVersion: v1
kind: Service
metadata:
  name: powerdns-service-dns-tcp
  namespace: pair-system
  labels:
    app.kubernetes.io/name: powerdns
    app.kubernetes.io/instance: powerdns
  annotations:
    metallb.universe.tf/allow-shared-ip: nginx-ingress
spec:
  type: LoadBalancer
  externalIPs:
    - ${KUBERNETES_CONTROLPLANE_ENDPOINT}
    - ${MACHINE_IP}
  ports:
    - port: 53
      targetPort: dns-tcp
      protocol: TCP
      name: dns-tcp
  selector:
    app.kubernetes.io/name: powerdns
    app.kubernetes.io/instance: powerdns
    powerdns.com/role: api
---
apiVersion: v1
kind: Service
metadata:
  name: powerdns-service-dns-udp
  namespace: pair-system
  labels:
    app.kubernetes.io/name: powerdns
    app.kubernetes.io/instance: powerdns
  annotations:
    metallb.universe.tf/allow-shared-ip: nginx-ingress
spec:
  type: LoadBalancer
  externalIPs:
    - ${KUBERNETES_CONTROLPLANE_ENDPOINT}
    - ${MACHINE_IP}
  ports:
    - port: 53
      targetPort: dns-udp
      protocol: UDP
      name: dns-udp
  selector:
    app.kubernetes.io/name: powerdns
    app.kubernetes.io/instance: powerdns
    powerdns.com/role: api
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: powerdns-db
  namespace: pair-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: powerdns-db
  namespace: pair-system
  labels:
    powerdns.com/role: db
    app.kubernetes.io/name: powerdns
    app.kubernetes.io/instance: powerdns
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: powerdns
      app.kubernetes.io/instance: powerdns
      powerdns.com/role: db
  template:
    metadata:
      labels:
        app.kubernetes.io/name: powerdns
        app.kubernetes.io/instance: powerdns
        powerdns.com/role: db
    spec:
      # securityContext:
      # fsGroup: 1000
      containers:
        - name: mariadb
          image: "linuxserver/mariadb:alpine-version-10.5.12-r0"
          imagePullPolicy: IfNotPresent
          # securityContext:
          #   runAsUser: 1000
          #   runAsGroup: 1000
          #   runAsNonRoot: true
          volumeMounts:
            - name: powerdns-db
              mountPath: /var/lib/mysql
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: MYSQL_INITDB_SKIP_TZINFO
              value: "1"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: powerdns-secret
                  key: MYSQL_PASS
            - name: MYSQL_DATABASE
              value: "powerdns"
            - name: MYSQL_USER
              value: "powerdns"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: powerdns-secret
                  key: MYSQL_PASS
      volumes:
        - name: powerdns-db
          persistentVolumeClaim:
            claimName: powerdns-db
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: powerdns
  namespace: pair-system
data:
  pdns.conf: |
    allow-dnsupdate-from=192.168.0.0/24
    api=yes
    api-key=pairingissharing
    default-soa-mail=hostmaster.${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME}
    default-soa-name=ns1.${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME}
    default-ttl=60
    dnsupdate=yes
    gmysql-dbname=powerdns
    gmysql-host=powerdns-service-db
    gmysql-innodb-read-committed=no
    gmysql-password=pairingissharing
    gmysql-port=3306
    gmysql-user=powerdns
    guardian=yes
    launch=gmysql
    master=yes
    setgid=pdns
    setuid=pdns
    soa-minimum-ttl=60
    version-string=anonymous
    webserver=yes
    webserver-address=0.0.0.0
    webserver-allow-from=0.0.0.0/0
    webserver-password=pairingissharing
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: powerdns
  namespace: pair-system
  labels:
    app.kubernetes.io/name: powerdns
    app.kubernetes.io/instance: powerdns
    powerdns.com/role: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: powerdns
      app.kubernetes.io/instance: powerdns
      powerdns.com/role: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: powerdns
        app.kubernetes.io/instance: powerdns
        powerdns.com/role: api
    spec:
      containers:
        - name: powerdns
          image: "pschiffe/pdns-mysql:4.3-alpine"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pdnsutil list-zone ${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - nc -vz powerdns-service-db 3306
            initialDelaySeconds: 20
          lifecycle:
            postStart:
              exec:
                command:
                  - "/bin/sh"
                  - "-c"
                  - |
                    a=0;
                    while [ $a -lt 200 ]; do
                      sleep 1
                      a=$[a+1]
                      echo 'stage: '$a
                      if nc -vz powerdns-service-db 3306; then
                        (! pdnsutil list-zone ${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME}) && pdnsutil create-zone ${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME}
                      fi
                      if ! pdnsutil list-tsig-keys pair | grep -E 'pair..*'; then
                        pdnsutil generate-tsig-key pair hmac-md5
                        pdnsutil activate-tsig-key ${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME} pair master
                        pdnsutil set-meta ${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME} TSIG-ALLOW-DNSUPDATE pair
                        pdnsutil set-meta ${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME} NOTIFY-DNSUPDATE 1
                        pdnsutil set-meta ${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME} SOA-EDIT-DNSUPDATE EPOCH
                      fi
                      if ! pdnsutil list-zone ${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME} | grep -E "^${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME}.*60.*IN.*NS.*ns1.${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME}.$"; then
                        pdnsutil add-record ${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME} @ NS 60 ns1.${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME}
                      fi
                      if ! pdnsutil list-zone ${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME} | grep -E "^${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME}.*60.*IN.*A.*${KUBERNETES_CONTROLPLANE_ENDPOINT}$"; then
                        pdnsutil add-record ${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME} @ A 60 ${KUBERNETES_CONTROLPLANE_ENDPOINT}
                      fi
                      echo 'End Stage'
                      a=200
                    done
          # securityContext:
          #   runAsUser: 101
          #   runAsGroup: 100
          #   readOnlyRootFilesystem: true
          #   runAsNonRoot: true
          #   allowPrivilegeEscalation: false
          #   capabilities:
          #     add:
          #       - NET_BIND_SERVICE
          #     drop:
          #       - all
          command:
            - pdns_server
          env:
            - name: PDNS_api_key
              valueFrom:
                secretKeyRef:
                  name: "powerdns-secret"
                  key: PDNS_APIKEY
            - name: PDNS_master
              value: "yes"
            - name: PDNS_api
              value: "yes"
            - name: PDNS_webserver
              value: "yes"
            - name: PDNS_webserver_address
              value: "0.0.0.0"
            - name: PDNS_webserver_allow_from
              value: "0.0.0.0/0"
            - name: PDNS_webserver_password
              valueFrom:
                secretKeyRef:
                  name: "powerdns-secret"
                  key: PDNS_APIKEY
            - name: PDNS_version_string
              value: "anonymous"
            - name: PDNS_default_ttl
              value: "60"
            - name: PDNS_soa_minimum_ttl
              value: "60"
            - name: PDNS_default_soa_name
              value: "ns1.${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME}"
            - name: PDNS_default_soa_mail
              value: "hostmaster.${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME}"
            - name: PDNS_gmysql_innodb_read_committed
              value: "no"
            - name: MYSQL_ENV_MYSQL_HOST
              value: "powerdns-service-db"
            - name: MYSQL_ENV_MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "powerdns-secret"
                  key: MYSQL_PASS
            - name: MYSQL_ENV_MYSQL_DATABASE
              value: "powerdns"
            - name: MYSQL_ENV_MYSQL_USER
              value: "powerdns"
            - name: MYSQL_ENV_MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "powerdns-secret"
                  key: MYSQL_PASS
            - name: PDNS_dnsupdate
              value: "yes"
            - name: PDNS_allow_dnsupdate_from
              value: 192.168.0.0/24
          ports:
            - containerPort: 53
              name: dns-udp
              protocol: UDP
            - containerPort: 53
              name: dns-tcp
              protocol: TCP
            - containerPort: 8081
              name: api
              protocol: TCP
          volumeMounts:
            - name: powerdns
              mountPath: /etc/pdns/
            - name: var-run-pdns
              mountPath: /var/run/pdns
      initContainers:
        - name: powerdns-init-db
          image: pschiffe/pdns-mysql:4.3-alpine
          env:
            - name: MYSQL_ENV_MYSQL_HOST
              value: "powerdns-service-db"
            - name: MYSQL_ENV_MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "powerdns-secret"
                  key: MYSQL_PASS
            - name: MYSQL_ENV_MYSQL_DATABASE
              value: "powerdns"
            - name: MYSQL_ENV_MYSQL_USER
              value: "powerdns"
            - name: MYSQL_ENV_MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "powerdns-secret"
                  key: MYSQL_PASS
          command:
            - sh
            - -x
            - -c
            - |
              MYSQL_COMMAND="mysql -h ${MYSQL_ENV_MYSQL_HOST} -P 3306 -u ${MYSQL_ENV_MYSQL_USER} -p${MYSQL_ENV_MYSQL_PASSWORD}"
              $MYSQL_COMMAND -e "CREATE DATABASE IF NOT EXISTS ${MYSQL_ENV_MYSQL_DATABASE}"
              MYSQL_CHECK_IF_HAS_TABLE="SELECT COUNT(DISTINCT table_name) FROM information_schema.columns WHERE table_schema = '${MYSQL_ENV_MYSQL_DATABASE}';"
              MYSQL_NUM_TABLE=$($MYSQL_COMMAND --batch --skip-column-names -e "$MYSQL_CHECK_IF_HAS_TABLE")
              if [ ! "$MYSQL_NUM_TABLE" -eq 0 ]; then
                exit 0
              fi
              $MYSQL_COMMAND -D "${MYSQL_ENV_MYSQL_DATABASE}" < /usr/share/doc/pdns/schema.mysql.sql
      volumes:
        - name: powerdns
          configMap:
            name: powerdns
        - name: var-run-pdns
          emptyDir: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: powerdns
  namespace: pair-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: powerdns
  namespace: cert-manager
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - patch
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: powerdns
  namespace: pair-system
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - get
      - list
    resourceNames:
      - powerdns
  - apiGroups:
      - ""
    resources:
      - pods/exec
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - patch
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: powerdns
  namespace: pair-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: powerdns
subjects:
  - kind: ServiceAccount
    name: powerdns
    namespace: pair-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: powerdns
  namespace: cert-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: powerdns
subjects:
  - kind: ServiceAccount
    name: powerdns
    namespace: pair-system
---
apiVersion: batch/v1
kind: Job
metadata:
  name: powerdns-init
  namespace: pair-system
spec:
  template:
    spec:
      serviceAccountName: powerdns
      containers:
        - name: powerdns-init
          # Environment is used because it is already used elsewehere and already contains the following utilities
          # - kuberctl
          # - bash
          image: registry.gitlab.com/sharingio/environment/environment:2022.08.09.1633
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            allowPrivilegeEscalation: false
          command:
            - bash
            - -x
            - -c
            - |
              time (
                until kubectl -n pair-system exec deployment/powerdns -- pdnsutil list-zone ${SHARINGIO_PAIR_INSTANCE_SETUP_BASEDNSNAME} > /dev/null 2>&1; do
                  sleep 1s
                done
              )
              time (
                until [ ! "$(kubectl -n pair-system exec deployment/powerdns -- pdnsutil list-tsig-keys pair | grep -E '^pair. hmac-md5. .*$')" = "" ]; do
                  sleep 1s
                done
              )
              export POWERDNS_TSIG_SECRET="$(kubectl -n pair-system exec deployment/powerdns -- pdnsutil list-tsig-keys | grep pair | awk '{print $3}')"
              kubectl -n cert-manager create secret generic tsig-powerdns --from-literal=powerdns="$POWERDNS_TSIG_SECRET" --dry-run=client -o yaml | \
                kubectl apply -f -
              kubectl -n pair-system create secret generic tsig-powerdns --from-literal=powerdns="$POWERDNS_TSIG_SECRET" --dry-run=client -o yaml | \
                kubectl apply -f -
      restartPolicy: OnFailure
